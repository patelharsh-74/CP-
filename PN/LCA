vi g[N];
int notRoot[N], n, m;
struct LCA {
  int l, n, timer;
  vector<int> tin, tout;
  vector<vector<int>> up;
  LCA(int _n) {
    n = _n;
    preprocess();
  }
  void dfs(int v, int p) {
    tin[v] = ++timer;
    up[v][0] = p;
    for (int i = 1; i <= l; ++i)
      up[v][i] = up[up[v][i - 1]][i - 1];
    for (int u : g[v]) {
      if (u != p)
        dfs(u, v);
    }
    tout[v] = ++timer;
  }
 
  bool is_ancestor(int u, int v) {
    return tin[u] <= tin[v] && tout[u] >= tout[v];
  }
  int lca(int u, int v) {
    if (is_ancestor(u, v))
      return u;
    if (is_ancestor(v, u))
      return v;
    for (int i = l; i >= 0; --i) {
      if (!is_ancestor(up[u][i], v))
        u = up[u][i];
    }
    return up[u][0];
  }
  int kthAncestor(int v, int k) {
    for(int i = l; i >= 0; --i) {
      if(k & (1LL << i)) {
        v = up[v][i];
      }
    }
    return v;
  }
  void preprocess() {
    tin.resize(n);
    tout.resize(n);
    timer = 0;
    l = ceil(log2(n));
    up.assign(n, vector<int>(l + 1));
    for(int i = 0; i < n; i++) {
      if(!notRoot[i]) dfs(i, i);
    }
  }
};
